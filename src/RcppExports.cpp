// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP nlf_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(rcpparma_hello_world());
    return __result;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP nlf_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    __result = Rcpp::wrap(rcpparma_outerproduct(x));
    return __result;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP nlf_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    __result = Rcpp::wrap(rcpparma_innerproduct(x));
    return __result;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP nlf_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    __result = Rcpp::wrap(rcpparma_bothproducts(x));
    return __result;
END_RCPP
}
// linear
NumericVector linear(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_linear(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(linear(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// quadratic
NumericVector quadratic(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_quadratic(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(quadratic(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// cubic
NumericVector cubic(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_cubic(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(cubic(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// qroot
NumericVector qroot(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_qroot(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(qroot(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// exponential2
NumericVector exponential2(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_exponential2(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(exponential2(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// logE
NumericVector logE(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_logE(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(logE(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// sigmoid
NumericVector sigmoid(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_sigmoid(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(sigmoid(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// step
NumericVector step(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_step(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(step(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// spike
NumericVector spike(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_spike(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(spike(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// sinLow
NumericVector sinLow(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_sinLow(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(sinLow(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// sinHigh
NumericVector sinHigh(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_sinHigh(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(sinHigh(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// linearPeriodic
NumericVector linearPeriodic(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_linearPeriodic(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(linearPeriodic(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// varyingFreq
NumericVector varyingFreq(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_varyingFreq(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(varyingFreq(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// circle
NumericVector circle(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_circle(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(circle(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}
// xShaped
NumericVector xShaped(NumericVector x, int noise, float noiseLevel, int numNoise, int n);
RcppExport SEXP nlf_xShaped(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(xShaped(x, noise, noiseLevel, numNoise, n));
    return __result;
END_RCPP
}

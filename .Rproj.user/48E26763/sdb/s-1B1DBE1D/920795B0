{
    "collab_server" : "",
    "contents" : "// This file was generated by Rcpp::compileAttributes\n// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393\n\n#include <RcppArmadillo.h>\n#include <Rcpp.h>\n\nusing namespace Rcpp;\n\n// linearCpp\nNumericVector linearCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_linearCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(linearCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// quadraticCpp\nNumericVector quadraticCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_quadraticCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(quadraticCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// cubicCpp\nNumericVector cubicCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_cubicCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(cubicCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// qrootCpp\nNumericVector qrootCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_qrootCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(qrootCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// exponentialCpp\nNumericVector exponentialCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_exponentialCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(exponentialCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// logECpp\nNumericVector logECpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_logECpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(logECpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// sigmoidCpp\nNumericVector sigmoidCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_sigmoidCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(sigmoidCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// stepCpp\nNumericVector stepCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_stepCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(stepCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// spikeCpp\nNumericVector spikeCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_spikeCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(spikeCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// sinLowCpp\nNumericVector sinLowCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_sinLowCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(sinLowCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// sinHighCpp\nNumericVector sinHighCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_sinHighCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(sinHighCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// linearPeriodicCpp\nNumericVector linearPeriodicCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_linearPeriodicCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(linearPeriodicCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// varyingFreqCpp\nNumericVector varyingFreqCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_varyingFreqCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(varyingFreqCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// circleCpp\nNumericVector circleCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_circleCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(circleCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n// xShapedCpp\nNumericVector xShapedCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n);\nRcppExport SEXP nlf_xShapedCpp(SEXP xSEXP, SEXP noiseSEXP, SEXP noiseLevelSEXP, SEXP numNoiseSEXP, SEXP nSEXP) {\nBEGIN_RCPP\n    Rcpp::RObject __result;\n    Rcpp::RNGScope __rngScope;\n    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);\n    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);\n    Rcpp::traits::input_parameter< float >::type noiseLevel(noiseLevelSEXP);\n    Rcpp::traits::input_parameter< int >::type numNoise(numNoiseSEXP);\n    Rcpp::traits::input_parameter< int >::type n(nSEXP);\n    __result = Rcpp::wrap(xShapedCpp(x, noise, noiseLevel, numNoise, n));\n    return __result;\nEND_RCPP\n}\n",
    "created" : 1481719431193.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "184111696",
    "id" : "920795B0",
    "lastKnownWriteTime" : 1481719355,
    "last_content_update" : 1481719355,
    "path" : "D:/projects/nlf/src/RcppExports.cpp",
    "project_path" : "src/RcppExports.cpp",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}
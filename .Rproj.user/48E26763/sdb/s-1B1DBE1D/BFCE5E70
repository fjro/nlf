{
    "collab_server" : "",
    "contents" : "//#include <Rcpp.h>\n#include <RcppArmadilloExtensions/sample.h>\n// [[Rcpp::depends(RcppArmadillo)]]\n\nusing namespace Rcpp;\n\n//define pi\ndouble pi = 3.141592653589793238462643383280;\n\n//’ The length of a string (in characters).\n//’\n//’ @param str input character vector\n//’ @return characters in each element of the vector\n// [[Rcpp::export]]\nNumericVector linearCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return x + noise * (noiseLevel/numNoise) * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector quadraticCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return  4 * pow(x-.5, 2) +  noise * (noiseLevel/numNoise) * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector cubicCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return (128 * pow(x - 1/3.0, 3)) - (48 * pow(x-1/3.0, 3)) - (12 * (x-1/3.0)) + 10 * noise  * (noiseLevel/numNoise) * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector qrootCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return pow(x, 1/4.0) + noise * (noiseLevel/numNoise) * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector exponentialCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return exp(pow(x, 2)) + (1.5 *noise * (noiseLevel/numNoise) * rnorm(n));\n}\n\n// [[Rcpp::export]]\nNumericVector logECpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return log(x) + 2 * (noise * (noiseLevel/numNoise) * rnorm(n));\n}\n\n// [[Rcpp::export]]\nNumericVector sigmoidCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return (1/(1 + exp(10*(0.5 - x)))) + (noise * (noiseLevel/numNoise) * rnorm(n) );\n}\n\n// [[Rcpp::export]]\nNumericVector stepCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  NumericVector v(x.size());\n  for(int i = 0; i < v.size(); i++) {\n    if(x[i] > 0.5) {\n      v[i] = 1;\n    }\n  }\n\n  return v + (noise*5*noiseLevel/numNoise *rnorm(n));\n}\n\n// [[Rcpp::export]]\nNumericVector spikeCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  NumericVector v(x.size());\n  for(int i = 0; i < v.size(); i++) {\n    if (x[i] < 0.05) {\n      v[i] = 4.0;\n    }\n    else if(x[i] < 0.1) {\n      v[i] = -18.0 * x[i] + 1.9;\n    }\n    else {\n      v[i] = -x[i]/9.0 + 1.0/9.0;\n    }\n  }\n\n  return v + noise * 5 * noiseLevel/numNoise * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector sinLowCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return sin(4*pi*x) + 2*noise * (noiseLevel/numNoise) * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector sinHighCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return sin(16*pi*x) + 2*noise * (noiseLevel/numNoise) * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector linearPeriodicCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return sin(10*pi*x) + x + 3 * noise * (noiseLevel/numNoise) * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector varyingFreqCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return sin(5*pi*x*(1+x)) + x + 3 * noise * (noiseLevel/numNoise) * rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector circleCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  return (2 * rbinom(n,1,0.5) -1.0) * sqrt(1 - pow(2.0 * x - 1.0,2)) + noise/4.0*noiseLevel/numNoise *rnorm(n);\n}\n\n// [[Rcpp::export]]\nNumericVector xShapedCpp(NumericVector x, int noise, float noiseLevel, int numNoise, int n) {\n  NumericVector vec(2);\n  vec[0] = -1;\n  vec[1] = 1;\n  return (4 * pow(x -0.5, 2) + (noiseLevel/numNoise) * rnorm(n)) *  RcppArmadillo::sample( vec, n, true);\n}\n",
    "created" : 1481673050892.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3000116248",
    "id" : "BFCE5E70",
    "lastKnownWriteTime" : 1481719160,
    "last_content_update" : 1481719160734,
    "path" : "D:/projects/nlf/src/twowayFunctions.cpp",
    "project_path" : "src/twowayFunctions.cpp",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}
{
    "collab_server" : "",
    "contents" : "\\name{RcppArmadillo-Functions}\n\\alias{rcpparma_hello_world}\n\\alias{rcpparma_innerproduct}\n\\alias{rcpparma_outerproduct}\n\\alias{rcpparma_bothproducts}\n\\title{Set of functions in example RcppArmadillo package}\n\\description{\n  These four functions are created when\n  \\code{RcppArmadillo.package.skeleton()} is invoked to create a\n  skeleton packages.\n}\n\\usage{\nrcpparma_hello_world()\nrcpparma_outerproduct(x)\nrcpparma_innerproduct(x)\nrcpparma_bothproducts(x)\n}\n\\arguments{\n  \\item{x}{a numeric vector}\n}\n\\value{\n  \\code{rcpparma_hello_world()} does not return a value, but displays a\n  message to the console.\n\n  \\code{rcpparma_outerproduct()} returns a numeric matrix computed as the\n  outer (vector) product of \\code{x}.\n\n  \\code{rcpparma_innerproduct()} returns a double computer as the inner\n  (vector) product of \\code{x}.\n\n  \\code{rcpparma_bothproducts()} returns a list with both the outer and\n  inner products.\n  \n}\n\\details{\n  These are example functions which should be largely\n  self-explanatory. Their main benefit is to demonstrate how to write a\n  function using the Armadillo C++ classes, and to have to such a\n  function accessible from R.\n}\n\\references{\n  See the documentation for Armadillo, and RcppArmadillo, for more details.\n}\n\\examples{\n  x <- sqrt(1:4)\n  rcpparma_innerproduct(x)\n  rcpparma_outerproduct(x)\n}\n\\author{Dirk Eddelbuettel}\n\n",
    "created" : 1481719549361.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3035801345",
    "id" : "7E703CD4",
    "lastKnownWriteTime" : 1481672700,
    "last_content_update" : 1481672700,
    "path" : "D:/projects/nlf/man/rcpparma_hello_world.Rd",
    "project_path" : "man/rcpparma_hello_world.Rd",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_doc"
}